// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Updated for MongoDB - DO NOT CHANGE BACK TO SQLITE

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Groupuscule {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vehicles Vehicle[]

  @@map("groupuscules")
}

model VehicleType {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vehicles Vehicle[]
  vehicleModels VehicleModel[]

  @@map("vehicle_types")
}

model VehicleModel {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  vehicleTypeId String @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vehicleType VehicleType @relation(fields: [vehicleTypeId], references: [id], onDelete: Cascade)
  vehicles Vehicle[]

  @@map("vehicle_models")
}

model Vehicle {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  model           String
  licensePlate    String
  ownerName       String
  reportNumber    String
  photoProofDate  String?
  groupusculeId   String?     @db.ObjectId
  vehicleTypeId   String?     @db.ObjectId
  vehicleModelId  String?     @db.ObjectId
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  groupuscule Groupuscule? @relation(fields: [groupusculeId], references: [id], onDelete: SetNull)
  vehicleType VehicleType? @relation(fields: [vehicleTypeId], references: [id], onDelete: SetNull)
  vehicleModel VehicleModel? @relation(fields: [vehicleModelId], references: [id], onDelete: SetNull)

  @@map("vehicles")
}

enum UserRole {
  ADMIN
  USER
}